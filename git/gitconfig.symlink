# vim: ft=gitconfig
[alias]
	# simple aliases
	co = checkout
	br = branch
	ci = commit
	st = stash
	unstage = reset HEAD --
	last = log -1 HEAD
	visual = !gitg

	# View abbreviated SHA, description, and history graph of the latest 20 commits
	#l = log --pretty=oneline -n 20 --graph --abbrev-commit
	l = log --color --graph --decorate

	# View the current working tree status using the short format
	s = status

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = diff

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered
	
	# https://stackoverflow.com/questions/10641361/git-get-all-files-that-have-been-modified-in-branch 
	# get all files that have been modified in branch
	wcf = "!f() { git diff --stat $( git merge-base $1 $2 )..$2; }; f"

	# Merge GitHub pull request on top of the `master` branch
	mpr = "!f() { \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git rebase master pr/$1 && \
			git checkout master && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
		fi \
	}; f"
	a = add
	sh = show
	g = grep
	dw = diff --word-diff=color
	dc = diff --word-diff=color --word-diff-regex=.
	dii = diff --cached
	diw = diff --cached --word-diff=color
	dic = diff --cached --word-diff=color --word-diff-regex=.
	k = log --color --graph --decorate --pretty=oneline --abbrev-commit
	lgshort = log --color --graph --decorate --pretty=tformat:'%h\t%aN\t%C(bold)%s%C(yellow)%d'
	lgwdiff = log --color --graph --decorate -p --word-diff=color -w
	puf = push --force-with-lease
[color]
	ui = true
[core]
	pager = less -x4 -R
	whitespace = space-before-tab,indent-with-non-tab,tabwidth=4
[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[diff]
	noprefix = true
	mnemonicprefix = true
	# Detect copies as well as renames
	renames = copies
[http]
#	proxy = http://proxy:3128
[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true
	#conflictstyle = diff3
	#tool = kdiff3
	tool = gvim

[diff]
	# --diff-algorithm={patience|minimal|histogram|myers}
	algorithm = patience

[push]

	# Use the Git 1.x.x default to avoid errors on machines with old Git
	# installations. To use `simple` instead, add this to your `~/.extra` file:
	# `git config --global push.default simple`. See http://git.io/mMah-w.
	default = matching

# URL shorthands

[url "git@github.com:"]

	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

	insteadOf = "github:"

[url "https://gitorious.org/"]

	insteadOf = "git://gitorious.org/"

[url "git@gist.github.com:"]

	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

	insteadOf = "gist:"
[url "https://github.com"]

	insteadOf = "git://github.com"
[url "https://gitorious.org"]

	insteadOf = "git://gitorious.org"
[credential]
	helper = store
[branch]
	autosetuprebase = always

[include]
	path = ~/.local/.git/config
[cola]
	spellcheck = false
	tabwidth = 4
	safemode = false
	maxrecent = 99
[gui]
	historybrowser = gitg
[pull]
	rebase = true
